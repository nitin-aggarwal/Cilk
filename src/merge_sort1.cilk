#include <cilk.h>
#include <cilkview.h>
#include <algorithm>
#include <iostream>
#include <iterator>
#include <functional>
#include <math.h>

int binary_search(int *elements, int member, long left, long right)
{ 
	long low = left;
	long high = std::max(left, right+1);
	long mid;
	while(low < high)
	{
		mid = (low + high)/2;
		if(member <= elements[mid])
			high = mid;
		else
			low = mid+1;
	}
	return high;
}	

void merge_parallel(int * elements, long p1, long r1, long p2, long r2, long p3, int *A)
{ 
	long n1 = r1-p1+1;
	long n2 = r2-p2+1;
	if(n1 < n2)
	{
		merge_parallel(elements, p2, r2, p1, r1, p3, A);
	}
	if(n1 == 0 )
		return;
	else
	{
		long q1 = (p1 + r1)/2;
		long q2 = binary_search(elements, elements[q1], p2, r2);
		long q3 = p3 + ( q1 - p1 ) + ( q2 - p2 );
		A[q3] = elements[q1];
		cilk_spawn merge_parallel(elements, p1, q1-1, p2, q2-1, p3, A);
		merge_parallel(elements, q1+1, r1, q2, r2, q3+1, A);
		cilk_sync;
	}
}


void merge_sort_without(int *elements, long left, long right, int *A, int start){
	if(right == left)
		A[start] = elements[left];
	else{ 
		long length = right - left+1;
		int *T = (int *)malloc(length * sizeof(int));
		long lpos = (left + right)/2;
		long rpos = lpos - left + 1;
		cilk_spawn merge_sort_without(elements, left, lpos, T, 1);
		merge_sort_without(elements, lpos+1, right, T, rpos+1);
		cilk_sync;
		merge_parallel(T, 1, rpos, rpos+1, length, start, A);
	}	
}


// A simple test harness 
int qmain(long n)
{
    int *A = (int *)malloc(n * sizeof(int));
    int* elements = new int[n];
    bool flag = 1;

    cilk::cilkview cv;
    
    for (long i = 0; i < n; ++i)
	*(elements + i) = i%1024 +1;
    std::random_shuffle(elements,elements+n);
	
    cv.start();
    merge_sort_without(elements, 0, n-1, A, 0);
    cv.stop();
    
    cv.dump("merge_sort_with_parallel_merge-results", false);
    std::cout << cv.accumulated_milliseconds() / 1000.f << " seconds" << std::endl;
    
    for (int i = 0; i < n - 1; ++i) 
    {
        if (A[i] > A[i + 1]) 
	{
            std::cout << "Sort failed at location i=" << i << " A[i] = "
                      << A[i] << " A[i+1] = " << A[i + 1] << std::endl;
	    flag = 0;
	}
    }
    if(flag)
    	std::cout << "Calculation succeeded." << std::endl;

    free(A);
    return 0;
}

int cilk_main(int argc, char* argv[])
{
    long n = pow(10,6);
    if (argc > 1) {
         n = std::atoi(argv[1]);
         if (n <= 0) {
              std::cerr << "Invalid argument" << std::endl;
              
              std::cerr << "       N = number of elements to sort" << std::endl;
              return 1;
         }
    }
    return qmain(n);
}
